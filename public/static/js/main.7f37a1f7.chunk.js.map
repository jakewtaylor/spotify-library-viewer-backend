{"version":3,"sources":["hooks/useCookies.ts","services/SpotifyService.ts","components/auth/spotify/SpotifyGate.tsx","hooks/useQueryParams.ts","pages/Search/components/WaitForInput.tsx","recoil/search.ts","pages/Search/components/Artist/PictureContainer.tsx","recoil/atoms.ts","pages/Search/components/Artist/ArtistList.tsx","pages/Search/components/Artist/ArtistListSkeleton.tsx","pages/Search/components/Artists.tsx","pages/Search/components/AlbumResults.tsx","pages/Search/components/SearchBox.tsx","pages/Search/Search.tsx","serviceWorker.js","index.tsx","App.tsx"],"names":["useCookies","useMemo","document","cookie","split","reduce","acc","key","val","spotify","instance","_accessToken","localStorage","getItem","_refreshToken","this","buildInstance","setItem","axios","create","baseURL","paramsSerializer","params","stringify","createAuthRefreshInterceptor","err","handleRefresh","interceptors","request","use","req","accessToken","headers","post","refresh_token","refreshToken","then","res","console","log","data","access_token","catch","term","get","q","type","join","market","SpotifyGate","children","cookies","search","useLocation","parse","slice","useQueryParams","useEffect","needsTokens","setTokens","WaitForInput","state","foundError","className","props","error","flag","description","Component","Symbol","searchTerm","atom","default","searchResults","selector","a","query","artistResults","artists","albumResults","albums","PictureContainer","tracks","persistence_UNSTABLE","ArtistList","useRecoilValue","items","map","artist","i","id","images","length","src","url","name","ArtistListSkeleton","Array","fill","_","Artists","fallback","AlbumResults","album","SearchBox","useRecoilState","recoilSearchTerm","setRecoilSearchTerm","useState","setSearch","t","setTimeout","clearTimeout","value","onChange","e","target","placeholder","Search","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","exact","path","to","component","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f37a1f7.chunk.js","sourcesContent":["import { useMemo } from 'react';\n\nexport const useCookies = () => {\n  return useMemo(() => {\n    return document.cookie\n      .split('; ')\n      .reduce<Record<string, string>>((acc, cookie) => {\n        const [key, val] = cookie.split('=');\n        return {\n          ...acc,\n          [key]: val,\n        };\n      }, {});\n  }, []);\n};\n","import axios, { AxiosInstance } from 'axios';\nimport createAuthRefreshInterceptor from 'axios-auth-refresh';\nimport { stringify } from 'querystring';\nimport { SearchResponse } from '../types/spotify/SearchResponse';\n\nconst accessTokenKey = 'access_token';\nconst refreshTokenKey = 'refresh_token';\n\nclass SpotifyService {\n  protected instance: AxiosInstance;\n\n  protected _accessToken: string = localStorage.getItem(accessTokenKey) || '';\n  protected _refreshToken: string = localStorage.getItem(refreshTokenKey) || '';\n\n  protected get accessToken() {\n    return this._accessToken;\n  }\n  protected set accessToken(val: string) {\n    localStorage.setItem(accessTokenKey, val);\n    this._accessToken = val;\n  }\n\n  protected get refreshToken() {\n    return this._refreshToken;\n  }\n  protected set refreshToken(val: string) {\n    localStorage.setItem(refreshTokenKey, val);\n    this._refreshToken = val;\n  }\n\n  constructor() {\n    this.instance = this.buildInstance();\n  }\n\n  protected buildInstance() {\n    const instance = axios.create({\n      baseURL: 'https://api.spotify.com/v1',\n      paramsSerializer: params => stringify(params),\n    });\n\n    createAuthRefreshInterceptor(instance, err => this.handleRefresh(err));\n\n    instance.interceptors.request.use(req => {\n      if (this.accessToken) {\n        req.headers['Authorization'] = `Bearer ${this.accessToken}`;\n      }\n\n      return req;\n    });\n\n    return instance;\n  }\n\n  protected async handleRefresh(err: any) {\n    return axios\n      .post(\n        'http://spotify-api-viewer.test/api/spotify/refresh-token',\n        {\n          refresh_token: this.refreshToken,\n        },\n        // { withCredentials: true },\n      )\n      .then(res => {\n        console.log('refreshed:', res);\n\n        this.accessToken = res.data.access_token;\n      })\n      .catch(err => {\n        console.log('refresh failed!!', { err });\n      });\n  }\n\n  public needsTokens() {\n    return !this.accessToken;\n  }\n\n  public setTokens(accessToken: string, refreshToken: string) {\n    this.accessToken = accessToken;\n    this.refreshToken = refreshToken;\n  }\n\n  public search(term: string) {\n    return this.instance.get<SearchResponse>('/search', {\n      params: {\n        q: term,\n        type: ['album', 'artist', 'track'].join(','),\n        market: 'from_token',\n      },\n    });\n  }\n}\n\nexport const spotify = new SpotifyService();\n","import React, { useEffect } from 'react';\nimport { useCookies } from '../../../hooks/useCookies';\nimport { useQueryParams } from '../../../hooks/useQueryParams';\nimport { spotify } from '../../../services/SpotifyService';\n\nexport const SpotifyGate: React.FC = ({ children }) => {\n  const cookies = useCookies();\n  const params = useQueryParams();\n\n  useEffect(() => {\n    const accessToken = cookies.accessToken || (params.accessToken as string);\n    const refreshToken =\n      cookies.refreshToken || (params.refreshToken as string);\n\n    if (spotify.needsTokens() && accessToken && refreshToken) {\n      spotify.setTokens(accessToken, refreshToken);\n    }\n  }, [cookies, params]);\n\n  return <>{children}</>;\n};\n","import { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { parse } from 'querystring';\n\nexport const useQueryParams = () => {\n  const { search } = useLocation();\n\n  return useMemo(() => {\n    return parse(search.slice(1));\n  }, [search]);\n};\n","import React, { Component } from 'react';\n\nexport class WaitForInput extends Component {\n  static flag = Symbol('WaitForInput');\n\n  state = { foundError: false };\n\n  static getDerivedStateFromError(error: any) {\n    console.log(error);\n    if (error === WaitForInput.flag.description) {\n      return { foundError: true };\n    }\n\n    return { foundError: false };\n  }\n\n  render() {\n    return this.state.foundError ? (\n      <div className=\"p-4 text-center\">\n        <p className=\"text-gray-400\">\n          Enter a search term to see some results...\n        </p>\n      </div>\n    ) : (\n      this.props.children\n    );\n  }\n}\n","import { atom, selector } from 'recoil';\nimport { spotify } from '../services/SpotifyService';\nimport { WaitForInput } from '../pages/Search/components/WaitForInput';\n\nexport const searchTerm = atom({\n  key: 'searchTerm',\n  default: 'melvins',\n});\n\nexport const searchResults = selector({\n  key: 'searchResults',\n  get: async ({ get }) => {\n    const query = get(searchTerm);\n\n    console.log({ query });\n\n    if (!query) {\n      throw WaitForInput.flag.description;\n    }\n\n    const res = await spotify.search(query);\n\n    return res.data;\n  },\n});\n\nexport const artistResults = selector({\n  key: 'searchResults-artists',\n  get: ({ get }) => {\n    const response = get(searchResults);\n\n    return response.artists;\n  },\n});\n\nexport const albumResults = selector({\n  key: 'searchResults-albums',\n  get: ({ get }) => {\n    const response = get(searchResults);\n\n    return response.albums;\n  },\n});\n\nexport const trackResults = selector({\n  key: 'searchResults-tracks',\n  get: ({ get }) => {\n    const response = get(searchResults);\n\n    return response.tracks;\n  },\n});\n","import React from 'react';\n\nexport const PictureContainer: React.FC = ({ children }) => (\n  <div className=\"w-48 h-48 rounded-full overflow-hidden bg-gray-800\">\n    {children}\n  </div>\n);\n","import { atom } from 'recoil';\nexport * from './search';\n\nexport const accessTokenState = atom<string | null>({\n  key: 'accessToken',\n  default: null,\n  // @ts-ignore\n  persistence_UNSTABLE: { type: 'test' },\n});\n\nexport const refreshTokenState = atom<string | null>({\n  key: 'refreshToken',\n  default: null,\n  // @ts-ignore\n  persistence_UNSTABLE: { type: 'test' },\n});\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { artistResults } from '../../../../recoil/atoms';\nimport { PictureContainer } from './PictureContainer';\n\nexport const ArtistList: React.FC = () => {\n  const artists = useRecoilValue(artistResults);\n\n  return (\n    <>\n      {artists.items.map((artist, i) => (\n        <div\n          key={artist.id}\n          className={`flex-shrink-0 mr-4 text-center ${i === 0 ? 'ml-4' : ''}`}\n        >\n          {artist.images.length > 0 ? (\n            <PictureContainer>\n              <img\n                src={artist.images[0].url}\n                className=\"object-cover w-full h-full\"\n              />\n            </PictureContainer>\n          ) : (\n            <PictureContainer />\n          )}\n          <p className=\"w-48 text-lg font-bold text-gray-400 mt-2\">\n            {artist.name}\n          </p>\n        </div>\n      ))}\n      <p>&nbsp;</p>\n    </>\n  );\n};\n","import React from 'react';\nimport { PictureContainer } from './PictureContainer';\n\nexport const ArtistListSkeleton: React.FC = () => {\n  return (\n    <>\n      {Array(6)\n        .fill(0)\n        .map((_, i) => (\n          <div\n            key={i}\n            className={`flex-shrink-0 mr-4 text-center ${\n              i === 0 ? 'ml-4' : ''\n            }`}\n          >\n            <PictureContainer />\n          </div>\n        ))}\n    </>\n  );\n};\n","import React, { Suspense } from 'react';\nimport { ArtistList } from './Artist/ArtistList';\nimport { ArtistListSkeleton } from './Artist/ArtistListSkeleton';\n\nexport const Artists: React.FC = () => {\n  return (\n    <>\n      <h5 className=\"text-2xl font-bold text-gray-400 mt-4 mx-4 mb-2\">\n        Artists\n      </h5>\n\n      <div className=\"flex flex-row w-full overflow-scroll\">\n        <Suspense fallback={ArtistListSkeleton}>\n          <ArtistList />\n        </Suspense>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { albumResults } from '../../../recoil/atoms';\n\nexport const AlbumResults: React.FC = () => {\n  const albums = useRecoilValue(albumResults);\n\n  return (\n    <>\n      <h5 className=\"text-2xl font-bold text-gray-400 mt-4 mb-2 mx-4\">\n        Albums\n      </h5>\n      <div className=\"flex flex-row w-full overflow-scroll\">\n        {albums.items.map((album, i) => (\n          <div\n            key={album.id}\n            className={`flex-shrink-0 w-48 mr-4 ${i === 0 ? 'ml-4' : ''}`}\n          >\n            <img src={album.images[0].url} className=\"mb-2\" />\n            <p className=\"text-sm text-gray-400 font-semibold whitespace-no-wrap truncate\">\n              {album.name}\n            </p>\n            <p className=\"text-sm text-gray-400 whitespace-no-wrap\">\n              {album.artists.map(artist => artist.name).join(', ')}\n            </p>\n          </div>\n        ))}\n        <p>&nbsp;</p>\n      </div>\n    </>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useRecoilState } from 'recoil';\nimport { searchTerm } from '../../../recoil/atoms';\n\nexport const SearchBox: React.FC = () => {\n  const [recoilSearchTerm, setRecoilSearchTerm] = useRecoilState(searchTerm);\n  const [search, setSearch] = useState(recoilSearchTerm);\n\n  useEffect(() => {\n    const t = setTimeout(() => {\n      setRecoilSearchTerm(search);\n    }, 500);\n\n    return () => clearTimeout(t);\n  }, [search, setRecoilSearchTerm]);\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"bg-gray-800 rounded\">\n        <input\n          type=\"text\"\n          value={search}\n          onChange={e => setSearch(e.target.value)}\n          className=\"block w-full bg-transparent p-4 text-gray-200 placeholder:text-gray-200 focus:outline-none focus:shadow-lg\"\n          placeholder=\"Search...\"\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { Suspense } from 'react';\nimport { Artists } from './components/Artists';\nimport { AlbumResults } from './components/AlbumResults';\nimport { SearchBox } from './components/SearchBox';\nimport { WaitForInput } from './components/WaitForInput';\nimport { useRecoilValue } from 'recoil';\nimport { searchTerm } from '../../recoil/atoms';\n\nexport const Search: React.FC = () => {\n  const query = useRecoilValue(searchTerm);\n\n  return (\n    <div className=\"h-full\">\n      <SearchBox />\n\n      {query ? (\n        <>\n          <Artists />\n\n          <Suspense fallback={<p>loading...</p>}>\n            <AlbumResults />\n          </Suspense>\n        </>\n      ) : (\n        <div className=\"p-4 text-center\">\n          <p className=\"text-gray-400\">\n            Enter a search term to see some results...\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport { RecoilRoot } from 'recoil';\nimport { SpotifyGate } from './components/auth/spotify/SpotifyGate';\nimport { Search } from './pages/Search/Search';\n\n// const initializeState: RecoilRootProps['initializeState'] = ({ set }) => {\n//   const atomsArr = Object.values(atoms);\n\n//   atomsArr.forEach(atom => {\n//     console.log(atom);\n//     const val = localStorage.getItem(atom.key);\n\n//     if (val) {\n//       set(atom, JSON.parse(val).value);\n//     }\n//   });\n// };\n\nexport const App: React.FC = () => {\n  return (\n    <RecoilRoot /*initializeState={initializeState}*/>\n      <Router>\n        <SpotifyGate>\n          <Route exact path=\"/\">\n            <p className=\"text-red-500\">test</p>\n            <Link to=\"/search\">Go to search</Link>\n          </Route>\n\n          <Route exact path=\"/search\" component={Search} />\n        </SpotifyGate>\n      </Router>\n    </RecoilRoot>\n  );\n};\n"],"sourceRoot":""}